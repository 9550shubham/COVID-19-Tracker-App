import 'package:covid_tracker/Model/world_states.dart';
import 'package:covid_tracker/View/countries_list_screen.dart';
import 'package:covid_tracker/services/get_api.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:pie_chart/pie_chart.dart';

class WorldStates extends StatefulWidget {
  const WorldStates({Key? key}) : super(key: key);

  @override
  _WorldStatesState createState() => _WorldStatesState();
}

class _WorldStatesState extends State<WorldStates>
    with TickerProviderStateMixin {
  late final AnimationController _controller = AnimationController(
    duration: const Duration(milliseconds: 1000),
    vsync: this,
  )..repeat();

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  FetchWorldStates fetchWorldStates = FetchWorldStates();

  final colorList = <Color>[
    const Color(0xff4285F4),
    const Color(0xff1aa260),
    const Color(0xffde5246),
  ];

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        SystemNavigator.pop();
        return true;
      },
      child: Scaffold(
        body: SafeArea(
          child: Padding(
            padding: const EdgeInsets.all(5.0),
            child: Column(
              children: [
                const SizedBox(
                  height: 10,
                ),
                Container(
                  height: 690,
                  child: FutureBuilder(
                      future: fetchWorldStates.getworldstates(),
                      builder:
                          (context, AsyncSnapshot<Autogenerated> snapshot) {
                        if (!snapshot.hasData) {
                          return Container(
                            child: SpinKitFadingCircle(
                              color: Colors.white,
                              size: 50.0,
                              controller: _controller,
                            ),
                          );
                        } else {
                          return Column(
                            children: [
                              const SizedBox(
                                height: 27,
                              ),
                              PieChart(
                                dataMap: {
                                  "Cases": double.parse(
                                      snapshot.data!.cases!.toString()),
                                  "Recovered": double.parse(
                                      snapshot.data!.recovered.toString()),
                                  "Deaths": double.parse(
                                      snapshot.data!.deaths.toString()),
                                },
                                animationDuration: Duration(seconds: 1),
                                chartLegendSpacing: 32,
                                chartRadius: 150,
                                colorList: colorList,
                                initialAngleInDegree: 0,
                                chartType: ChartType.ring,
                                ringStrokeWidth: 25,
                                legendOptions: const LegendOptions(
                                  showLegendsInRow: false,
                                  legendPosition: LegendPosition.left,
                                  showLegends: true,
                                  legendTextStyle: TextStyle(
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                chartValuesOptions: const ChartValuesOptions(
                                  showChartValueBackground: true,
                                  showChartValues: true,
                                  showChartValuesInPercentage: true,
                                  showChartValuesOutside: true,
                                  decimalPlaces: 1,
                                ),
                              ),
                              const SizedBox(
                                height: 17,
                              ),
                              Padding(
                                padding: const EdgeInsets.all(20),
                                child: Card(
                                  child: Column(
                                    children: [
                                      const SizedBox(
                                        height: 4,
                                      ),
                                      ReusableRow(
                                          title: 'Cases',
                                          value:
                                              snapshot.data!.cases.toString()),
                                      const Divider(),
                                      ReusableRow(
                                          title: 'Recovered',
                                          value: snapshot.data!.recovered
                                              .toString()),
                                      const Divider(),
                                      ReusableRow(
                                          title: 'Deaths',
                                          value:
                                              snapshot.data!.deaths.toString()),
                                      const Divider(),
                                      ReusableRow(
                                          title: 'Active',
                                          value:
                                              snapshot.data!.active.toString()),
                                      const Divider(),
                                      ReusableRow(
                                          title: 'Critical',
                                          value: snapshot.data!.critical
                                              .toString()),
                                      const Divider(),
                                      ReusableRow(
                                          title: 'Today Cases',
                                          value: snapshot.data!.todayCases
                                              .toString()),
                                      const Divider(),
                                      ReusableRow(
                                          title: 'Today Recovered',
                                          value: snapshot.data!.todayRecovered
                                              .toString()),
                                      const Divider(),
                                      ReusableRow(
                                          title: 'Today Deaths',
                                          value: snapshot.data!.todayDeaths
                                              .toString()),
                                      const SizedBox(
                                        height: 4,
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                              GestureDetector(
                                onTap: () {
                                  Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                          builder: (context) =>
                                              CountriesListScreen()));
                                },
                                child: Padding(
                                  padding: const EdgeInsets.only(
                                      top: 10, bottom: 10, left: 30, right: 30),
                                  child: Container(
                                    height: 35,
                                    decoration: BoxDecoration(
                                        color: Color(0xff1aa260),
                                        borderRadius:
                                            BorderRadius.circular(10)),
                                    child: const Center(
                                      child: Text('Track Countries'),
                                    ),
                                  ),
                                ),
                              )
                            ],
                          );
                        }
                      }),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

// ignore: must_be_immutable
class ReusableRow extends StatelessWidget {
  String title, value;
  ReusableRow({Key? key, required this.title, required this.value})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.only(left: 10, right: 10),
      child: Column(
        children: [
          Padding(
            padding: EdgeInsets.all(2),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [Text(title), Text(value)],
            ),
          ),
        ],
      ),
    );
  }
}
